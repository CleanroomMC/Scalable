import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'scala'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.34'
}

version = "1.12.2-${mod_version}"
group = project.maven_group

base {
    archivesName = archives_base_name
}

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

compileJava {
    sourceCompatibility = 8 // for the IDE support

    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    // Include and use dependencies' Access Transformer files
    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    // Example:
    injectedTags.put('VERSION', project.version)
    injectedTags.put('MOD_ID', project.mod_id)
    injectedTags.put("MOD_VERSION", project.mod_version)
}

tasks.injectTags.outputClassName.set("${maven_group}.${project.mod_id}.Tags")


repositories {
    flatDir { dir 'libs' }
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url = 'https://maven.blamejared.com'
        name = 'BlameJared Maven'
    }

    mavenLocal() // Must be last for caching to work
}

dependencies {
    if (project.use_assetmover.toBoolean()) {
        implementation 'com.cleanroommc:assetmover:2.5'
    }
    if (project.use_mixins.toBoolean()) {
        implementation 'zone.rong:mixinbooter:9.1'
    }

    // Example of deobfuscating a dependency
    // implementation rfg.deobf('curse.maven:had-enough-items-557549:4543375')

    if (project.use_mixins.toBoolean()) {
        // Change your mixin refmap name here:
        String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.5', "mixins.${project.mod_id}.refmap.json")
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }

    implementation "com.google.guava:guava:33.0.0-jre"

    embed 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
    embed 'org.scala-lang:scala-compiler:2.11.12'
    // We change the version so old installs don't break, as our clone of the jar is different the maven central
    embed 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.3'
    embed 'org.scala-lang.plugins:scala-continuations-plugin_2.11.11:1.0.3'

    embed 'org.scala-lang:scala-library:2.11.12'
    embed 'org.scala-lang.modules:scala-parser-combinators_2.11:2.2.0'
    embed 'org.scala-lang:scala-reflect:2.11.12'
    embed 'org.scala-lang:scala-swing_2.11:1.0.1'
    embed 'org.scala-lang:scala-xml_2.11:1.0.2'
}
// Adds Access Transformer files to tasks
if (project.use_access_transformer.toBoolean()) {
    for (File at : sourceSets.getByName("main").resources.files) {
        if (at.name.toLowerCase().endsWith("_at.cfg")) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
        }
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.mod_version
    inputs.property 'mcversion', '1.12.2'

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info']) { fcd ->
        // Replace version and mcversion
        fcd.expand(
                'mod_version': project.mod_version,
                'minecraft_version': "1.12.2"
        )
    }


    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

tasks.register('generateMetaFiles') {
    // Code for execution after the whole buildscript was parsed and loaded
    doLast {
        // Clear the dependencyMeta directory since we don't want old dependencies to still be listed in there
        file("${buildDir}/dependencyMeta/").deleteDir()
        configurations.embed.resolvedConfiguration.resolvedArtifacts.each {
            // Create a meta file for each dependency in a specified directory
            def metaFile = file("${buildDir}/dependencyMeta/${it.file.name}.meta")
            metaFile.parentFile.mkdirs()
            // Use the Gradle notation provided by the API ('group:artifact:version') for the meta file...
            def artifactRef = it.moduleVersion.toString()
            // ...and append the classifier if present
            if (it.classifier != null) {
                artifactRef += ":${it.classifier}"
            }
            // Write the artifact information to the meta file, to be used by the
            metaFile.text = "Maven-Artifact: $artifactRef"
        }
    }
}

jar {
    into('/') {
        // Add all of the dependency JARs to the main JAR for later extraction
        from configurations.embed
        // Also include all dependency meta files
        from "${buildDir}/dependencyMeta/"
    }
    doFirst{
        manifest {
            def attribute_map = [:]
            attribute_map['ContainedDeps'] = configurations.embed.collect { it.name }.join(' ')
            if (project.use_coremod.toBoolean()) {
                attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
                if (project.include_mod.toBoolean()) {
                    attribute_map['FMLCorePluginContainsFMLMod'] = true
                    attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
                }
            }
            if (project.use_access_transformer.toBoolean()) {
                attribute_map['FMLAT'] = project.mod_id + '_at.cfg'
            }
            attributes(attribute_map)
        }
        // Add all embedded dependencies into the jar
        //from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })

    }
    dependsOn generateMetaFiles
}

tasks.register('apiJar', Jar){
    archiveClassifier = "api"
    manifest {
        attributes([
                'Specification-Title': mod_id,
                'Specification-Vendor': "kappa-maintainer",
                'Specification-Version': '1', // We are version 1 of ourselves
                'FMLCorePlugin': project.coremod_plugin_class_name
        ])
    }
    from sourceSets.main.output
}

artifacts {
    archives jar
    archives apiJar
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}

publishing {
    repositories {
        maven {
            name = "outlands"
            url = "https://maven.outlands.top/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
    publications {
        maven(MavenPublication) {
            artifacts sourcesJar
            artifacts apiJar
            groupId = project.maven_group
            artifactId = project.mod_id
            version = project.mod_version
            from components.java
        }
    }
}
